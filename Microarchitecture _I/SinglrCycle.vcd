$date
	Fri Dec 13 17:51:54 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Single_Cycle_top_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module Single_Cycle_top $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # SrcB [31:0] $end
$var wire 1 $ ResultSrc $end
$var wire 32 % Result [31:0] $end
$var wire 1 & RegWrite $end
$var wire 32 ' ReadData [31:0] $end
$var wire 32 ( RD_Instr [31:0] $end
$var wire 32 ) RD2_top [31:0] $end
$var wire 32 * RD1_top [31:0] $end
$var wire 32 + PC_top [31:0] $end
$var wire 32 , PCPlus4 [31:0] $end
$var wire 1 - MemWrite $end
$var wire 32 . Imm_Ext_top [31:0] $end
$var wire 2 / ImmSrc [1:0] $end
$var wire 32 0 Alu_result [31:0] $end
$var wire 1 1 ALUSrc $end
$var wire 3 2 ALUControl_top [2:0] $end
$scope module Alu $end
$var wire 1 3 C $end
$var wire 1 4 V $end
$var wire 32 5 a_and_b [31:0] $end
$var wire 32 6 a_or_b [31:0] $end
$var wire 32 7 not_b [31:0] $end
$var wire 32 8 sum [31:0] $end
$var wire 32 9 slt [31:0] $end
$var wire 32 : mux_1 [31:0] $end
$var wire 1 ; Z $end
$var wire 1 < N $end
$var wire 1 = Cout $end
$var wire 32 > B [31:0] $end
$var wire 3 ? ALUControl [2:0] $end
$var wire 32 @ A [31:0] $end
$var reg 32 A Result [31:0] $end
$upscope $end
$scope module Control_unit_top $end
$var wire 7 B Op [6:0] $end
$var wire 3 C funct3 [2:0] $end
$var wire 7 D funct7 [6:0] $end
$var wire 1 $ ResultSrc $end
$var wire 1 & RegWrite $end
$var wire 1 - MemWrite $end
$var wire 2 E ImmSrc [1:0] $end
$var wire 1 F Branch $end
$var wire 1 1 ALUSrc $end
$var wire 2 G ALUOp [1:0] $end
$var wire 3 H ALUControl [2:0] $end
$scope module ALU_decoder $end
$var wire 7 I Op [6:0] $end
$var wire 3 J funct3 [2:0] $end
$var wire 7 K funct7 [6:0] $end
$var wire 2 L concatanation [1:0] $end
$var wire 2 M ALUOp [1:0] $end
$var wire 3 N ALUControl [2:0] $end
$upscope $end
$scope module Main_Decoder $end
$var wire 7 O Op [6:0] $end
$var wire 1 P zero $end
$var wire 1 $ ResultSrc $end
$var wire 1 & RegWrite $end
$var wire 1 - MemWrite $end
$var wire 2 Q ImmSrc [1:0] $end
$var wire 1 F Branch $end
$var wire 1 1 ALUSrc $end
$var wire 2 R ALUOp [1:0] $end
$upscope $end
$upscope $end
$scope module Data_mem $end
$var wire 32 S A [31:0] $end
$var wire 1 - WE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 T WD [31:0] $end
$var wire 32 U RD [31:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 1 " rst $end
$var wire 32 V RD [31:0] $end
$var wire 32 W A [31:0] $end
$upscope $end
$scope module Mux_DataMemory_to_Register $end
$var wire 32 X a [31:0] $end
$var wire 32 Y b [31:0] $end
$var wire 1 $ s $end
$var wire 32 Z c [31:0] $end
$upscope $end
$scope module Mux_Register_to_ALU $end
$var wire 1 1 s $end
$var wire 32 [ c [31:0] $end
$var wire 32 \ b [31:0] $end
$var wire 32 ] a [31:0] $end
$upscope $end
$scope module PC_aader $end
$var wire 32 ^ b [31:0] $end
$var wire 32 _ c [31:0] $end
$var wire 32 ` a [31:0] $end
$upscope $end
$scope module P_C $end
$var wire 32 a PC_NEXT [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 32 b PC [31:0] $end
$upscope $end
$scope module Register_files $end
$var wire 5 c A1 [4:0] $end
$var wire 5 d A2 [4:0] $end
$var wire 5 e A3 [4:0] $end
$var wire 32 f WD3 [31:0] $end
$var wire 1 & WE3 $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 g RD2 [31:0] $end
$var wire 32 h RD1 [31:0] $end
$upscope $end
$scope module sign_extend $end
$var wire 1 i ImmSrc $end
$var wire 32 j In [31:0] $end
$var wire 32 k Imm_Ext [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 k
b0 j
0i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b100 a
b0 `
b100 _
b100 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
zP
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
0F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
0=
0<
1;
b0 :
b0 9
b0 8
b11111111111111111111111111111111 7
b0 6
b0 5
04
03
b0 2
01
b0 0
b0 /
b0 .
0-
b100 ,
b0 +
b0 *
b0 )
b0 (
b0 '
0&
b0 %
0$
b0 #
0"
1!
$end
#50
0!
#100
1!
#150
b11111111111111111111111111111100 :
b11 7
1&
11
b100000 5
04
b11111111111111111111111111111100 .
b11111111111111111111111111111100 >
b11111111111111111111111111111100 \
b11111111111111111111111111111100 k
1$
0<
b100000 %
b100000 Z
b100000 f
0;
b11 D
b11 K
b10 C
b10 J
b11 B
b11 I
b11 O
b110 e
b11100 d
b1001 c
b0 9
13
b11100 0
b11100 A
b11100 S
b11100 X
b100000 '
b100000 U
b100000 Y
b11111111110001001010001100000011 (
b11111111110001001010001100000011 V
b11111111110001001010001100000011 j
b11100 8
1=
b11111111111111111111111111111100 6
b11111111111111111111111111111100 #
b11111111111111111111111111111100 [
b100000 *
b100000 @
b100000 h
bx )
bx T
bx ]
bx g
0!
1"
#200
x4
0<
bx '
bx U
bx Y
1;
bx %
bx Z
bx f
bx 2
bx ?
bx H
bx N
b0x 9
x3
b0 0
b0 A
b0 S
b0 X
bx #
bx [
bx :
bx 7
x&
x1
xi
bx 8
x=
bx 6
bx 5
bx .
bx >
bx \
bx k
bx L
x-
x$
xF
bx /
bx E
bx Q
bx G
bx M
bx R
bx *
bx @
bx h
bx D
bx K
bx C
bx J
bx B
bx I
bx O
bx e
bx d
bx c
bx (
bx V
bx j
b1000 ,
b1000 _
b1000 a
b100 +
b100 W
b100 `
b100 b
1!
#250
0!
#300
b1100 ,
b1100 _
b1100 a
b1000 +
b1000 W
b1000 `
b1000 b
1!
#350
0!
#400
b10000 ,
b10000 _
b10000 a
b1100 +
b1100 W
b1100 `
b1100 b
1!
#450
0!
#500
b10100 ,
b10100 _
b10100 a
b10000 +
b10000 W
b10000 `
b10000 b
1!
#550
0!
#600
b11000 ,
b11000 _
b11000 a
b10100 +
b10100 W
b10100 `
b10100 b
1!
#650
0!
